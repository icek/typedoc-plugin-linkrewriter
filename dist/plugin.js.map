{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../src/plugin.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\r\n   Copyright 2019 Ron Buckton\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n\r\nimport * as path from \"path\";\r\nimport * as marked from \"marked\";\r\nimport { Component, ContextAwareRendererComponent } from \"typedoc/dist/lib/output/components\";\r\nimport { BindOption } from \"typedoc/dist/lib/utils\";\r\nimport { MarkdownEvent, RendererEvent, PageEvent } from 'typedoc/dist/lib/output/events';\r\nimport { ProjectReflection, DeclarationReflection } from 'typedoc/dist/lib/models';\r\nimport { MarkdownRenderer } from './markdownRenderer';\r\n\r\nexport interface LinkRewriterContext {\r\n    project?: ProjectReflection;\r\n    reflection?: DeclarationReflection;\r\n    url?: string;\r\n    file?: string;\r\n}\r\n\r\nexport type LinkRewriter = (this: LinkRewriterContext, matched: string, ...args: any[]) => string;\r\n\r\nexport interface Links {\r\n    /**\r\n     * `pattern` is a regular expression pattern. The value is a regexp replacement string or `LinkRewriter` function.\r\n     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\r\n     */\r\n    [pattern: string]: string | LinkRewriter;\r\n}\r\n\r\n@Component({ name: \"linkrewriter\" })\r\nexport class LinkRewriterPlugin extends ContextAwareRendererComponent {\r\n    @BindOption('rewriteLinks')\r\n    rewriteLinks!: string | Links;\r\n\r\n    private _links: [RegExp, string | LinkRewriter][] | undefined;\r\n    private _page: PageEvent | undefined;\r\n    private _context: LinkRewriterContext | undefined;\r\n\r\n    initialize() {\r\n        super.initialize();\r\n        this.listenTo(this.owner, MarkdownEvent.PARSE, this.onParseMarkdown, 200);\r\n    }\r\n\r\n    onBeginRenderer(event: RendererEvent) {\r\n        super.onBeginRenderer(event);\r\n        this.ensureLinks();\r\n    }\r\n\r\n    onBeginPage(page: PageEvent) {\r\n        super.onBeginPage(page);\r\n        this._page = page;\r\n        this._context = this.createContext();\r\n    }\r\n\r\n    onParseMarkdown(event: MarkdownEvent) {\r\n        if (this._links) {\r\n            event.parsedText = marked.parse(event.parsedText, {\r\n                renderer: new LinkReplacer(this._links, this._context || this.createContext())\r\n            });\r\n        }\r\n    }\r\n\r\n    private createContext(): LinkRewriterContext {\r\n        return {\r\n            project: this.project,\r\n            reflection: this.reflection,\r\n            url: this._page && this._page.url,\r\n            file: this._page && this._page.filename\r\n        };\r\n    }\r\n\r\n    private ensureLinks() {\r\n        if (!this._links) {\r\n            this._links = this.buildLinks(typeof this.rewriteLinks === \"string\" ? this.loadLinks(this.rewriteLinks) : this.rewriteLinks);\r\n        }\r\n    }\r\n\r\n    private buildLinks(links: Links | undefined) {\r\n        if (!links) {\r\n            return [];\r\n        }\r\n        const result: [RegExp, string | LinkRewriter][] = [];\r\n        for (const [pattern, replacement] of Object.entries(links)) {\r\n            try {\r\n                result.push([new RegExp(pattern), replacement]);\r\n            }\r\n            catch {\r\n                this.application.logger.error(\"Failed to parse link pattern '%s'.\", pattern);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private loadLinks(links: string) {\r\n        try {\r\n            return require(path.resolve(links));\r\n        }\r\n        catch (e) {\r\n            this.application.logger.error(\"Could not load links '%s'.\", links);\r\n        }\r\n    }\r\n}\r\n\r\nclass LinkReplacer extends MarkdownRenderer {\r\n    private _links: [RegExp, string | LinkRewriter][];\r\n    private _context: LinkRewriterContext;\r\n\r\n    constructor(links: [RegExp, string | LinkRewriter][], context: LinkRewriterContext) {\r\n        super();\r\n        this._links = links;\r\n        this._context = context;\r\n    }\r\n\r\n    image(href: string, title: string | null, text: string): string {\r\n        return super.image(this.rewriteLinkDestination(href), title, text);\r\n    }\r\n\r\n    link(href: string, title: string, text: string): string {\r\n        return super.link(this.rewriteLinkDestination(href), title, text);\r\n    }\r\n\r\n    private rewriteLinkDestination(linkDestination: string) {\r\n        try {\r\n            const context = this._context;\r\n            const isBracketedLink = /^<.*>$/.test(linkDestination);\r\n            const url = isBracketedLink ? linkDestination.slice(1, -1) : linkDestination;\r\n            for (const [pattern, replacement] of this._links) {\r\n                const result = typeof replacement === \"function\"\r\n                    ? url.replace(pattern, replacement.bind(context))\r\n                    : url.replace(pattern, replacement);\r\n                if (result !== url) {\r\n                    return isBracketedLink ? `<${result}>` : result;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            throw e;\r\n        }\r\n        return linkDestination;\r\n    }\r\n}\r\n"]}